{
  "_args": [
    [
      {
        "raw": "gulp-svg-sprite@^1.3.1",
        "scope": null,
        "escapedName": "gulp-svg-sprite",
        "name": "gulp-svg-sprite",
        "rawSpec": "^1.3.1",
        "spec": ">=1.3.1 <2.0.0",
        "type": "range"
      },
      "C:\\Users\\Peter\\Desktop\\32-sprites-part3"
    ]
  ],
  "_from": "gulp-svg-sprite@>=1.3.1 <2.0.0",
  "_id": "gulp-svg-sprite@1.3.7",
  "_inCache": true,
  "_location": "/gulp-svg-sprite",
  "_nodeVersion": "6.6.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/gulp-svg-sprite-1.3.7.tgz_1496353855356_0.7119353928137571"
  },
  "_npmUser": {
    "name": "jkphl",
    "email": "joschi@kuphal.net"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {
    "clone-buffer": "1.0.0",
    "cloneable-readable": "1.0.0",
    "remove-trailing-separator": "1.1.0"
  },
  "_requested": {
    "raw": "gulp-svg-sprite@^1.3.1",
    "scope": null,
    "escapedName": "gulp-svg-sprite",
    "name": "gulp-svg-sprite",
    "rawSpec": "^1.3.1",
    "spec": ">=1.3.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/gulp-svg-sprite/-/gulp-svg-sprite-1.3.7.tgz",
  "_shasum": "cdf7fb359cdd8beb9fcd3d2d6affe61e54fca69e",
  "_shrinkwrap": null,
  "_spec": "gulp-svg-sprite@^1.3.1",
  "_where": "C:\\Users\\Peter\\Desktop\\32-sprites-part3",
  "author": {
    "name": "Joschi Kuphal",
    "email": "joschi@kuphal.net",
    "url": "https://jkphl.is"
  },
  "bugs": {
    "url": "https://github.com/jkphl/gulp-svg-sprite/issues"
  },
  "dependencies": {
    "gulp-util": "^3.0.8",
    "svg-sprite": "~1.3.7",
    "through2": "^2.0.3",
    "vinyl": "^2.0.2"
  },
  "description": "SVG sprites & stacks galore — Gulp plugin wrapping around svg-sprite that reads in a bunch of SVG files, optimizes them and creates SVG sprites and CSS resources in various flavours",
  "devDependencies": {
    "coveralls": "*",
    "event-stream": "*",
    "glob": "~7.1.2",
    "gulp": "^3.9.1",
    "gulp-jshint": "^2.0.4",
    "gulp-plumber": "^1.1.0",
    "image-diff": "^1.6.3",
    "istanbul": "*",
    "jshint": "^2.9.4",
    "mkdirp": "^0.5.1",
    "mocha": "*",
    "mocha-lcov-reporter": "*",
    "pn": "^1.0.0",
    "should": "~11.2.1",
    "svg2png": "github:jkphl/svg2png"
  },
  "directories": {},
  "dist": {
    "shasum": "cdf7fb359cdd8beb9fcd3d2d6affe61e54fca69e",
    "tarball": "https://registry.npmjs.org/gulp-svg-sprite/-/gulp-svg-sprite-1.3.7.tgz"
  },
  "engines": {
    "node": ">= 4.0"
  },
  "files": [
    "index.js",
    "CHANGELOG.md"
  ],
  "gitHead": "d907d73708ed6d9f59e608c4c8be71f6dc0c81bf",
  "homepage": "https://github.com/jkphl/gulp-svg-sprite",
  "keywords": [
    "gulpplugin",
    "icon",
    "icons",
    "svg",
    "png",
    "sprite",
    "spritesheet",
    "stack",
    "generator",
    "css",
    "sass",
    "less",
    "stylus",
    "stylesheet",
    "inline",
    "html",
    "vector",
    "rwd",
    "retina",
    "mustache"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "jkphl",
      "email": "joschi@kuphal.net"
    }
  ],
  "name": "gulp-svg-sprite",
  "optionalDependencies": {},
  "readme": "# gulp-svg-sprite [![NPM version][npm-image]][npm-url] [![NPM downloads][npm-downloads]][npm-url] [![Build Status][travis-image]][travis-url]  [![Coverage Status][coveralls-image]][coveralls-url] [![Dependency Status][depstat-image]][depstat-url] [![Development Dependency Status][devdepstat-image]][devdepstat-url]\n===============\n\nis a Gulp plugin wrapping around [svg-sprite](https://github.com/jkphl/svg-sprite) which **takes a bunch of [SVG](http://www.w3.org/TR/SVG/) files**, optimizes them and bakes them into **SVG sprites** of several types:\n\n*\tTraditional [CSS sprites](http://en.wikipedia.org/wiki/Sprite_(computer_graphics)#Sprites_by_CSS) for use as background images,\n*\tCSS sprites with **pre-defined `<view>` elements**, useful for foreground images as well,\n*\tinline sprites using the **`<defs>` element**,\n*\tinline sprites using the **`<symbol>` element**\n*\tand [SVG stacks](http://simurai.com/blog/2012/04/02/svg-stacks).\n\n\n## Features & configuration? → [svg-sprite](https://github.com/jkphl/svg-sprite)\n\nThis document covers only gulp specific installation and configuration aspects. For a full list of features and options, please see the [svg-sprite manual](https://github.com/jkphl/svg-sprite).\n\n\n## Usage\n\nFirst, install `gulp-svg-sprite` as a development dependency:\n\n```shell\nnpm install --save-dev gulp-svg-sprite\n```\n\nThen, add it to your `gulpfile.js`:\n\n```javascript\nvar gulp\t\t\t\t= require('gulp'),\nsvgSprite\t\t\t\t= require('gulp-svg-sprite');\n\ngulp.src('path/to/assets/*.svg')\n\t.pipe(svgSprite( /* ... Insert your configuration here ... */ ))\n\t.pipe(gulp.dest('out'));\n```\n\n**NOTICE**: By default, *svg-sprite* **doesn't send any files downstream** unless you configure it. There are tons of options available — please see below for [some basic examples](#basic-example). Also, you should possibly [take care of errors](#error-handling) that might occur.\n\n\n## API\n\n\n### svgSprite(options)\n\nAs `options` argument you may provide a [main configuration object](https://github.com/jkphl/svg-sprite/blob/master/docs/configuration.md) as described in the *svg-sprite* manual. Configuration-wise, *svg-sprite* and *gulp-svg-sprite* differ only in one respect:\n\n#### ~~options.dest~~\n\nType: `String`\nDefault value: `'.'`\n\nWith Gulp, there is no need to specifiy a **main output directory**, as the generated files are piped to the next step of the running task anyway. The `options.dest` value (if given) is simply ignored.\n\n\n## Examples\n\n\n### Basic example\n\nIn this very basic example, mostly default settings will be applied to create a traditional CSS sprite (bundle of SVG sprite and CSS stylesheet).\n\n```javascript\nvar gulp\t\t\t\t= require('gulp'),\nsvgSprite\t\t\t\t= require('gulp-svg-sprite'),\n\n// Basic configuration example\nconfig\t\t\t\t\t= {\n\tmode\t\t\t\t: {\n\t\tcss\t\t\t\t: {\t\t// Activate the «css» mode\n\t\t\trender\t\t: {\n\t\t\t\tcss\t\t: true\t// Activate CSS output (with default options)\n\t\t\t}\n\t\t}\n\t}\n};\n\ngulp.src('**/*.svg', {cwd: 'path/to/assets'})\n\t.pipe(svgSprite(config))\n\t.pipe(gulp.dest('out'));\n```\n\nThe following files and directories are created:\n\n```\nout\n`-- css\n    |-- sprite.css\n    `-- svg\n        `-- sprite.css-495d2010.svg\n```\n\n> The cryptical looking part in the SVG's file name is the result of *svg-sprite*'s cache busting feature which is enabled by default for CSS sprites. We'll turn this off in the next example.\n\n\n### More complex example\n\nThe following example is a little more complex:\n\n* We'll create a **«view» CSS sprite** and a **«symbol» sprite** in one go.\n* Instead of CSS, we'll render a **Sass stylesheet** resource for the «view» sprite.\n* We'll **turn off cache busting** for the «view» sprite and create **extra CSS rules specifying each shape's dimensions**.\n* We'll **downscale the SVG shapes** to 32×32 pixels if necessary and **add 10 pixels padding** to all sides.\n* We'll keep the intermediate SVG source files.\n\n```javascript\nvar gulp\t\t\t\t= require('gulp'),\nsvgSprite\t\t\t\t= require('gulp-svg-sprite'),\n\n// More complex configuration example\nconfig\t\t\t\t\t= {\n\tshape\t\t\t\t: {\n\t\tdimension\t\t: {\t\t\t// Set maximum dimensions\n\t\t\tmaxWidth\t: 32,\n\t\t\tmaxHeight\t: 32\n\t\t},\n\t\tspacing\t\t\t: {\t\t\t// Add padding\n\t\t\tpadding\t\t: 10\n\t\t},\n\t\tdest\t\t\t: 'out/intermediate-svg'\t// Keep the intermediate files\n\t},\n\tmode\t\t\t\t: {\n\t\tview\t\t\t: {\t\t\t// Activate the «view» mode\n\t\t\tbust\t\t: false,\n\t\t\trender\t\t: {\n\t\t\t\tscss\t: true\t\t// Activate Sass output (with default options)\n\t\t\t}\n\t\t},\n\t\tsymbol\t\t\t: true\t\t// Activate the «symbol» mode\n\t}\n};\n\ngulp.src('**/*.svg', {cwd: 'path/to/assets'})\n\t.pipe(svgSprite(config))\n\t.pipe(gulp.dest('out'));\n```\n\nThe following files and directories are created:\n\n```\nout\n|-- intermediate-svg\n|   |-- weather-clear.svg\n|   |-- weather-snow.svg\n|   `-- weather-storm.svg\n|-- symbol\n|   `-- svg\n|       `-- sprite.symbol.svg\n`-- view\n    |-- sprite.scss\n    `-- svg\n        `-- sprite.view.svg\n```\n\n### Error handling\n\nErrors might always happen — maybe there are some corrupted source SVG files, the default [SVGO](https://github.com/svg/svgo) plugin configuration is too aggressive or there's just an error in *svg-sprite*'s code. To make your tasks more robust, you might consider using [plumber](https://github.com/floatdrop/gulp-plumber) and adding your custom error handling:\n\n```javascript\nvar gulp\t\t\t\t= require('gulp'),\nsvgSprite\t\t\t\t= require('gulp-svg-sprite'),\nplumber\t\t\t\t\t= require('gulp-plumber'),\n\n// Basic configuration example\nconfig\t\t\t\t\t= {\n\tmode\t\t\t\t: {\n\t\tcss\t\t\t\t: {\n\t\t\trender\t\t: {\n\t\t\t\tcss\t\t: true\n\t\t\t}\n\t\t}\n\t}\n};\n\ngulp.src('**/*.svg', {cwd: ''})\n\t.pipe(plumber())\n\t.pipe(svgSprite(config))\n\t\t.on('error', function(error){\n\t\t\t/* Do some awesome error handling ... */\n\t\t})\n\t.pipe(gulp.dest('out'));\n```\n\n\n#### Advanced features\n\nFor more advanced features like\n\n*\t[custom transformation](https://github.com/jkphl/svg-sprite/blob/master/docs/configuration.md#svg-transformations),\n*\t[meta data injection](https://github.com/jkphl/svg-sprite/blob/master/docs/meta-data.md),\n*\t[customizing output templates](https://github.com/jkphl/svg-sprite/blob/master/docs/templating.md) or\n*\tintroducing new output formats\n\nplease refer to the [svg-sprite manual](https://github.com/jkphl/svg-sprite).\n\n\nChangelog\n---------\n\nPlease refer to the [changelog](CHANGELOG.md) for a complete release history.\n\n\nLegal\n-----\nCopyright © 2015 Joschi Kuphal <joschi@kuphal.net> / [@jkphl](https://twitter.com/jkphl). *svg-sprite* is licensed under the terms of the [MIT license](LICENSE.txt). The contained example SVG icons are part of the [Tango Icon Library](http://tango.freedesktop.org/Tango_Icon_Library) and belong to the Public Domain.\n\n\n[npm-url]: https://npmjs.org/package/gulp-svg-sprite\n[npm-image]: https://badge.fury.io/js/gulp-svg-sprite.png\n[npm-downloads]: https://img.shields.io/npm/dm/gulp-svg-sprite.svg\n\n[travis-url]: http://travis-ci.org/jkphl/gulp-svg-sprite\n[travis-image]: https://secure.travis-ci.org/jkphl/gulp-svg-sprite.png\n\n[coveralls-url]: https://coveralls.io/r/jkphl/gulp-svg-sprite\n[coveralls-image]: https://img.shields.io/coveralls/jkphl/gulp-svg-sprite.svg\n\n[depstat-url]: https://david-dm.org/jkphl/gulp-svg-sprite\n[depstat-image]: https://david-dm.org/jkphl/gulp-svg-sprite.svg\n[devdepstat-url]: https://david-dm.org/jkphl/gulp-svg-sprite#info=devDependencies\n[devdepstat-image]: https://david-dm.org/jkphl/gulp-svg-sprite/dev-status.svg\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jkphl/gulp-svg-sprite.git"
  },
  "scripts": {
    "coveralls": "istanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage",
    "test": "gulp && istanbul test _mocha --report html -- test/*.js --reporter spec"
  },
  "version": "1.3.7"
}
