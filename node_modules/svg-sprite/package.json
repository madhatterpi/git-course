{
  "_args": [
    [
      {
        "raw": "svg-sprite@~1.3.7",
        "scope": null,
        "escapedName": "svg-sprite",
        "name": "svg-sprite",
        "rawSpec": "~1.3.7",
        "spec": ">=1.3.7 <1.4.0",
        "type": "range"
      },
      "C:\\Users\\Peter\\Desktop\\32-sprites-part3\\node_modules\\gulp-svg-sprite"
    ]
  ],
  "_from": "svg-sprite@>=1.3.7 <1.4.0",
  "_id": "svg-sprite@1.3.7",
  "_inCache": true,
  "_location": "/svg-sprite",
  "_nodeVersion": "6.6.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/svg-sprite-1.3.7.tgz_1496352466157_0.4444658700376749"
  },
  "_npmUser": {
    "name": "jkphl",
    "email": "joschi@kuphal.net"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {
    "cliui": "3.2.0",
    "clone-buffer": "1.0.0",
    "cloneable-readable": "1.0.0",
    "decamelize": "1.2.0",
    "execa": "0.7.0",
    "get-caller-file": "1.0.2",
    "graceful-fs": "4.1.11",
    "lcid": "1.0.0",
    "locate-path": "2.0.0",
    "mem": "1.1.0",
    "normalize-package-data": "2.4.0",
    "parse-json": "2.2.0",
    "pify": "2.3.0",
    "remove-trailing-separator": "1.1.0",
    "require-directory": "2.1.1",
    "require-main-filename": "1.0.1",
    "set-blocking": "2.0.0",
    "y18n": "3.2.1"
  },
  "_requested": {
    "raw": "svg-sprite@~1.3.7",
    "scope": null,
    "escapedName": "svg-sprite",
    "name": "svg-sprite",
    "rawSpec": "~1.3.7",
    "spec": ">=1.3.7 <1.4.0",
    "type": "range"
  },
  "_requiredBy": [
    "/gulp-svg-sprite"
  ],
  "_resolved": "https://registry.npmjs.org/svg-sprite/-/svg-sprite-1.3.7.tgz",
  "_shasum": "7ade036000e8794a3f814402a808aae290ecd1f3",
  "_shrinkwrap": null,
  "_spec": "svg-sprite@~1.3.7",
  "_where": "C:\\Users\\Peter\\Desktop\\32-sprites-part3\\node_modules\\gulp-svg-sprite",
  "author": {
    "name": "Joschi Kuphal",
    "email": "joschi@kuphal.net",
    "url": "https://jkphl.is"
  },
  "bin": {
    "svg-sprite": "./bin/svg-sprite.js"
  },
  "bugs": {
    "url": "https://github.com/jkphl/svg-sprite/issues"
  },
  "dependencies": {
    "async": "^2.4.1",
    "css-selector-parser": "^1.3.0",
    "cssmin": "^0.4.3",
    "cssom": "^0.3.2",
    "dateformat": "^2.0.0",
    "glob": "^7.1.2",
    "js-yaml": "^3.8.4",
    "lodash": "^4.17.4",
    "lodash.pluck": "^3.1.2",
    "mkdirp": "^0.5.1",
    "mustache": "^2.3.0",
    "phantomjs-prebuilt": "^2.1.14",
    "prettysize": "^0.1.0",
    "svgo": "^0.7.2",
    "vinyl": "^2.0.2",
    "winston": "^2.3.1",
    "xmldom": "0.1.27",
    "xpath": "^0.0.24",
    "yargs": "^8.0.1"
  },
  "description": "SVG sprites & stacks galore — A low-level Node.js module that takes a bunch of SVG files, optimizes them and bakes them into SVG sprites of several types along with suitable stylesheet resources (e.g. CSS, Sass, LESS, Stylus, etc.)",
  "devDependencies": {
    "coveralls": "*",
    "image-diff": "^1.6.3",
    "istanbul": "*",
    "jshint": "^2.9.4",
    "less": "^2.7.2",
    "mocha": "",
    "mocha-lcov-reporter": "*",
    "node-sass": "^4.5.3",
    "pn": "^1.0.0",
    "rimraf": "",
    "should": "",
    "stylus": "^0.54.5",
    "svg2png": "github:jkphl/svg2png",
    "vinyl-fs": "^2.4.4"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "7ade036000e8794a3f814402a808aae290ecd1f3",
    "tarball": "https://registry.npmjs.org/svg-sprite/-/svg-sprite-1.3.7.tgz"
  },
  "engines": {
    "node": ">= 4.0"
  },
  "files": [
    "bin",
    "docs",
    "lib",
    "tmpl",
    "CHANGELOG.md"
  ],
  "gitHead": "d8ce19af4d5e007ffd5e7cd47e60badbcfd91c64",
  "homepage": "https://github.com/jkphl/svg-sprite",
  "keywords": [
    "icon",
    "icons",
    "svg",
    "png",
    "sprite",
    "spritesheet",
    "stack",
    "generator",
    "css",
    "sass",
    "less",
    "stylus",
    "stylesheet",
    "inline",
    "html",
    "vector",
    "rwd",
    "retina",
    "mustache",
    "gulpfriendly"
  ],
  "license": "MIT",
  "main": "lib/svg-sprite.js",
  "maintainers": [
    {
      "name": "jkphl",
      "email": "joschi@kuphal.net"
    }
  ],
  "name": "svg-sprite",
  "optionalDependencies": {},
  "readme": "svg-sprite [![NPM version][npm-image]][npm-url] [![NPM downloads][npm-downloads]][npm-url] [![Build Status][travis-image]][travis-url] [![Coverage Status][coveralls-image]][coveralls-url] [![Dependency Status][depstat-image]][depstat-url] [![Development Dependency Status][devdepstat-image]][devdepstat-url]\n====================================================================================================================================================================================================================================================================================================================================================================================================\n\nis a low-level [Node.js](http://nodejs.org/) module that **takes a bunch of [SVG](http://www.w3.org/TR/SVG/) files**, optimizes them and bakes them into **SVG sprites** of several types:\n\n*\tTraditional [CSS sprites](http://en.wikipedia.org/wiki/Sprite_(computer_graphics)#Sprites_by_CSS) for use as background images,\n*\tCSS sprites with **pre-defined `<view>` elements**, useful for foreground images as well,\n*\tinline sprites using the **`<defs>` element**,\n*\tinline sprites using the **`<symbol>` element**\n*\tand [SVG stacks](http://simurai.com/blog/2012/04/02/svg-stacks/).\n\nIt comes with a set of [Mustache](http://mustache.github.io/) templates for creating stylesheets in good ol' [CSS](http://www.w3.org/Style/CSS/) or one of the major **pre-processor formats** ([Sass](http://sass-lang.com/), [Less](http://lesscss.org/) and [Stylus](http://learnboost.github.io/stylus/)). Tweaking the templates or even adding your own **custom output format** is really easy, just as switching on the generation of an **HTML example document** along with your sprite.\n\nFor an up-to-date list of browsers supporting [SVG in general](http://caniuse.com/#feat=svg) respectively [SVG fragment identifiers](http://caniuse.com/#feat=svg-fragment) in particular (required for `<defs>` and `<symbol>` sprites as well as SVG stacks) please refer to [caniuse.com](http://caniuse.com/).\n\nGrunt, Gulp & Co.\n-----------------\n\nBeing a low-level library with support for [Node.js streams](https://github.com/substack/stream-handbook), *svg-sprite* doesn't take on the part of accessing the file system (i.e. reading the source SVGs from and writing the sprites and CSS files to disk). If you don't want to take care of this stuff yourself, you might rather have a look at the available wrappers for **Grunt** ([grunt-svg-sprite](https://github.com/jkphl/grunt-svg-sprite)) and **Gulp** ([gulp-svg-sprite](https://github.com/jkphl/gulp-svg-sprite)). *svg-sprite* is also the foundation of the **[iconizr](https://github.com/jkphl/node-iconizr)** project, which serves high-quality SVG based **CSS icon kits with PNG fallbacks**.\n\n\nTable of contents\n-----------------\n* [Installation](#installation)\n* [Getting started](#getting-started)\n\t* [Usage pattern](#usage-pattern)\n\t* [Standard API](docs/api.md)\n\t* [Grunt & Gulp wrappers](docs/grunt-gulp.md)\n* [Configuration basics](#configuration-basics)\n\t* [General configuration options](#general-configuration-options)\n\t* [Output modes](#output-modes)\n\t\t* [Common mode properties](#common-mode-properties)\n\t\t* [Basic examples](#basic-examples)\n\t* [Output destinations](#output-destinations)\n\t\t* [Pre-processor formats and the sprite location](#pre-processor-formats-and-the-sprite-location)\n\t* [Full configuration documentation](docs/configuration.md)\n\t* [Online configurator & project kickstarter](http://jkphl.github.io/svg-sprite)\n* [Advanced techniques](#advanced-techniques)\n\t* [Meta data injection](docs/meta-data.md)\n\t* [Aligning and duplicating shapes](docs/shape-alignment.md)\n\t* [Tweaking and adding output formats](docs/templating.md)\n* [Command line usage](docs/command-line.md)\n* [Known problems / To-do](#known-problems--to-do)\n* [Changelog](CHANGELOG.md)\n* [Legal](#legal)\n\n\nInstallation\n------------\n\nTo install *svg-sprite* globally, run\n\n```bash\nnpm install svg-sprite -g\n```\n\non the command line.\n\n\nGetting started\n---------------\n\nCrafting a sprite with *svg-sprite* typically follows these steps:\n\n1. You [create an instance of the SVGSpriter](docs/api.md#svgspriter-config-), passing a main configuration object to the constructor.\n2. You [register a couple of SVG source files](docs/api.md#svgspriteraddfile--name-svg-) for processing.\n3. You [trigger the compilation process](docs/api.md#svgspritercompile-config--callback-) and receive the generated files (sprite, CSS, example documents etc.).\n\nThe procedure is the very same for all supported sprite types («modes»).\n\n\n### Usage pattern\n\n```js\n// Create spriter instance (see below for `config` examples)\nvar spriter       = new SVGSpriter(config);\n\n// Add SVG source files — the manual way ...\nspriter.add('assets/svg-1.svg', null, fs.readFileSync('assets/svg-1.svg', {encoding: 'utf-8'}));\nspriter.add('assets/svg-2.svg', null, fs.readFileSync('assets/svg-2.svg', {encoding: 'utf-8'}));\n\t/* ... */\n\n// Compile the sprite\nspriter.compile(function(error, result) {\n\t/* Write `result` files to disk (or do whatever with them ...) */\n\tfor (var mode in result) {\n\t\tfor (var resource in result[mode]) {\n\t\t\tmkdirp.sync(path.dirname(result[mode][resource].path));\n\t\t\tfs.writeFileSync(result[mode][resource].path, result[mode][resource].contents);\n\t\t}\n\t}\n});\n```\n\nAs you can see, big parts of the above are dealing with disk I/O. In this regard you can make your life easier by [using the Grunt or Gulp wrappers](docs/grunt-gulp.md) instead of the [standard API](docs/api.md).\n\n\nConfiguration basics\n--------------------\n\nOf course you noticed the `config` variable passed to the constructor in the above example. This is *svg-sprite*'s **main configuration** — an `Object` with the following properties:\n\n```js\n{\n\tdest\t\t\t: <String>,\t\t\t\t// Main output directory\n\tlog  \t\t\t: <String|Logger>,\t\t// Logging verbosity or custom logger\n\tshape\t\t\t: <Object>,\t\t\t\t// SVG shape configuration\n\tsvg\t\t\t\t: <Object>,\t\t\t\t// Common SVG options\n\tvariables\t\t: <Object>,\t\t\t\t// Custom templating variables\n\tmode\t\t\t: <Object>\t\t\t\t// Output mode configurations\n}\n```\n\nIf you don't provide a configuration object altogether, *svg-sprite* uses built-in defaults for these properties, so in fact they are all optional. However, you will need to enable at least one **output mode** (`mode` property) to get reasonable results (i.e. a sprite of some type).\n\n\n### General configuration options\n\nMany configuration properties (all except `mode`) apply to all sprites created by the same spriter instance. The default values are:\n\n```js\n// Common svg-sprite config options and their default values\n\nvar config\t\t\t\t\t= {\n\tdest\t\t\t\t\t: '.',\t\t\t\t\t\t// Main output directory\n\tlog\t\t\t\t\t\t: null,\t\t\t\t\t\t// Logging verbosity (default: no logging)\n\tshape\t\t\t\t\t: {\t\t\t\t\t\t\t// SVG shape related options\n\t\tid\t\t\t\t\t: {\t\t\t\t\t\t\t// SVG shape ID related options\n\t\t\tseparator\t\t: '--',\t\t\t\t\t\t// Separator for directory name traversal\n\t\t\tgenerator\t\t: function() { /*...*/ },\t// SVG shape ID generator callback\n\t\t\tpseudo\t\t\t: '~'\t\t\t\t\t\t// File name separator for shape states (e.g. ':hover')\n\t\t},\n\t\tdimension\t\t\t: {\t\t\t\t\t\t\t// Dimension related options\n\t\t\tmaxWidth\t\t: 2000,\t\t\t\t\t\t// Max. shape width\n\t\t\tmaxHeight\t\t: 2000,\t\t\t\t\t\t// Max. shape height\n\t\t\tprecision\t\t: 2,\t\t\t\t\t\t// Floating point precision\n\t\t\tattributes\t\t: false,\t\t\t\t\t// Width and height attributes on embedded shapes\n\t\t},\n\t\tspacing\t\t\t\t: {\t\t\t\t\t\t\t// Spacing related options\n\t\t\tpadding\t\t\t: 0,\t\t\t\t\t\t// Padding around all shapes\n\t\t\tbox\t\t\t\t: 'content'\t\t\t\t\t// Padding strategy (similar to CSS `box-sizing`)\n\t\t},\n\t\ttransform\t\t\t: ['svgo'],\t\t\t\t\t// List of transformations / optimizations\n\t\tmeta\t\t\t\t: null,\t\t\t\t\t\t// Path to YAML file with meta / accessibility data\n\t\talign\t\t\t\t: null,\t\t\t\t\t\t// Path to YAML file with extended alignment data\n\t\tdest\t\t\t\t: null\t\t\t\t\t\t// Output directory for optimized intermediate SVG shapes\n\t},\n\tsvg\t\t\t\t\t\t: {\t\t\t\t\t\t\t// General options for created SVG files\n\t\txmlDeclaration\t\t: true,\t\t\t\t\t\t// Add XML declaration to SVG sprite\n\t\tdoctypeDeclaration\t: true,\t\t\t\t\t\t// Add DOCTYPE declaration to SVG sprite\n\t\tnamespaceIDs\t\t: true,\t\t\t\t\t\t// Add namespace token to all IDs in SVG shapes\n\t\tnamespaceClassnames\t: true,\t\t\t\t\t\t// Add namespace token to all CSS class names in SVG shapes\n\t\tdimensionAttributes\t: true\t\t\t\t\t\t// Width and height attributes on the sprite\n\t},\n\tvariables\t\t\t\t: {}\t\t\t\t\t\t// Custom Mustache templating variables and functions\n}\n```\n\nPlease refer to the [configuration documentation](docs/configuration.md) for details.\n\n\n### Output modes\n\nAt the moment, *svg-sprite* supports **five different output modes** (i.e. sprite types), each of them having it's own characteristics and use cases. It's up to you to decide which sprite type is the best choice for your project. The `mode` option controls which sprite types are created. You may enable more than one output mode at a time — *svg-sprite* will happily create several sprites in parallel.\n\nTo enable the creation of a specific sprite type with default values, simply set the appropriate `mode` property to `true`:\n\n```js\nvar config\t\t\t\t\t= {\n\tmode\t\t\t\t\t: {\n\t\tcss\t\t\t\t\t: true,\t\t// Create a «css» sprite\n\t\tview\t\t\t\t: true,\t\t// Create a «view» sprite\n\t\tdefs\t\t\t\t: true,\t\t// Create a «defs» sprite\n\t\tsymbol\t\t\t\t: true,\t\t// Create a «symbol» sprite\n\t\tstack\t\t\t\t: true\t\t// Create a «stack» sprite\n\t}\n}\n```\n\nTo further configure a sprite, pass in an object with configuration options:\n\n```js\n// «symbol» sprite with CSS stylesheet resource\n\nvar config\t\t\t\t\t= {\n\tmode\t\t\t\t\t: {\n\t\tcss\t\t\t\t\t: {\n\t\t\t// Configuration for the «css» sprite\n\t\t\t// ...\n\t\t}\n\t}\n}\n```\n\n\n#### Common mode properties\n\nMany `mode` properties are shared between the different sprite types, but there are also type specific options. Please refer to the [configuration documentation](docs/configuration.md) for a complete list of settings.\n\n```js\n// Common mode properties\n\nvar config\t\t\t\t\t= {\n\tmode\t\t\t\t\t: {\n\t\t<mode> \t\t\t\t: {\n\t\t\tdest\t\t\t: \"<mode>\",\t\t\t\t\t\t// Mode specific output directory\n\t\t\tprefix\t\t\t: \"svg-%s\",\t\t\t\t\t\t// Prefix for CSS selectors\n\t\t\tdimensions\t\t: \"-dims\",\t\t\t\t\t\t// Suffix for dimension CSS selectors\n\t\t\tsprite\t\t\t: \"svg/sprite.<mode>.svg\"\t\t// Sprite path and name\n\t\t\tbust\t\t\t: true|false,\t\t\t\t\t// Cache busting (mode dependent default value)\n\t\t\trender\t\t\t: {\t\t\t\t\t\t\t\t// Stylesheet rendering definitions\n\t\t\t\t/* -------------------------------------------\n\t\t\t\tcss\t\t\t: false,\t\t\t\t\t\t// CSS stylesheet options\n\t\t\t\tscss\t\t: false,\t\t\t\t\t\t// Sass stylesheet options\n\t\t\t\tless\t\t: false,\t\t\t\t\t\t// LESS stylesheet options\n\t\t\t\tstyl\t\t: false\t\t\t\t\t\t\t// Stylus stylesheet options\n\t\t\t\t<custom>\t: ...\t\t\t\t\t\t\t// Custom stylesheet options\n\t\t\t\t-------------------------------------------\t*/\n\t\t\t},\n\t\t\texample\t\t\t: false\t\t\t\t\t\t\t// Create an HTML example document\n\t\t}\n\t}\n}\n```\n\n\n#### Basic examples\n\n\n##### A.) Standalone sprite\n\nForeground image **sprite with `<symbol>` elements** (for being `<use>`d in your HTML source):\n\n```js\n// «symbol» sprite with CSS stylesheet resource\n\nvar config\t\t\t\t\t= {\n\tmode\t\t\t\t\t: {\n\t\tinline\t\t\t\t: true,\t\t// Prepare for inline embedding\n\t\tsymbol\t\t\t\t: true\t\t// Create a «symbol» sprite\n\t}\n}\n```\n\n\n##### B.) CSS sprite with Sass resource\n\nTraditional **CSS sprite** with a **Sass stylesheet**:\n\n```js\n// «css» sprite with Sass stylesheet resource\n\nvar config\t\t\t\t\t= {\n\tmode\t\t\t\t\t: {\n\t\tcss\t\t\t\t\t: {\t\t\t// Create a «css» sprite\n\t\t\trender\t\t\t: {\n\t\t\t\tscss\t\t: true\t\t// Render a Sass stylesheet\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n\n##### C.) Multiple sprites\n\n**`<defs>` sprite**, **`<symbol>` sprite** and an **SVG stack** all at once:\n\n```js\n// «defs», «symbol» and «stack» sprites in parallel\n\nvar config\t\t\t\t\t= {\n\tmode\t\t\t\t\t: {\n\t\tdefs\t\t\t\t: true,\n\t\tsymbol\t\t\t\t: true,\n\t\tstack\t\t\t\t: true\n\t}\n}\n```\n\n\n##### D.) No sprite at all\n\n`mode`-less run, returning the **optimized SVG shapes only**:\n\n```js\n// Just optimize source SVG files, create no sprite\n\nvar config\t\t\t\t\t= {\n\tshape\t\t\t\t\t: {\n\t\tdest\t\t\t\t: 'path/to/out/dir'\n\t}\n}\n```\n\n\n### Output destinations\n\nDepending on your particular configuration, *svg-sprite* creates a lot of files that partly refer to each other. There are several configuration options controlling the exact location of each file, and you are well advised to spend a moment on understanding how they interrelate with each other.\n\nRelative destination paths refer to their ancestors as shown in the following scheme, with the current working directory being the ultimate base.\n\n```\n        Destination option                     Default               Comment\n---------------------------------------------------------------------------------------------\ncwd $   <dest>/                                .                     Main output directory\n            <mode.css.dest>/                   css                   «css» base directory\n                <mode.css.sprite>              svg/sprite.css.svg    Sprite location\n                <mode.css.render.css.dest>     sprite.css            CSS stylesheet location\n                <mode.css.render.scss.dest>    sprite.scss           Sass stylesheet location\n                ...\n            <mode.view>/                       view                  «view» base directory\n                ...\n```\n\nBy default, stylesheet resources are generated directly into the respective **mode's base directory**.\n\n> \"Oh wait! Didn't you say that *svg-sprite* doesn't access the file system? So why do you need output directories at all?\" — Well, good point. *svg-sprite* uses [vinyl](https://github.com/wearefractal/vinyl) file objects to pass along virtual resources and to specify where they **are intended to be located**. This is especially important for relative file paths (e.g. the path of an SVG sprite as used by a CSS stylesheet).\n\n\n#### Pre-processor formats and the sprite location\n\nSpecial care needs to be taken when you create a **CSS sprite** («css» or «view» mode) along with a stylesheet in one of the **pre-processor formats** (Sass, LESS, Stylus etc.). In this case, calculating the correct relative SVG sprite path as used by the stylesheets can become tricky, as your (future) plain CSS compilation doesn't necessarily lie side by side with the pre-processor file. *svg-sprite* doesn't know anything about your pre-processor workflow, so it might have to estimate the location of the CSS file:\n\n1.\tIf you **truly configured CSS output** in addition to the pre-processor format, *svg-sprite* uses your custom `mode.<mode>.render.css.dest` as the CSS stylesheet location.\n2.\tIf you just **enabled CSS output** by setting `mode.<mode>.render.css` to `TRUE`, the default value applies, which is `mode.<mode>.dest / \"sprite.css\"`.\n3.\tThe same holds true when you **dont't enable CSS output** at all. *svg-sprite* then simply assumes that the CSS file will be created where the defaults would put it, which is again `mode.<mode>.dest / \"sprite.css\"`.\n\nSo even if you don't enable plain CSS output explicitly, please make sure to set `mode.<mode>.dest` to **where your final CSS file is intended to be**.\n\n\n### Full configuration documentation\n\nThe complete configuration documentation including all options [can be found here](docs/configuration.md).\n\n\n### Online configurator & project kickstarter\n\nTo get you quickly off the ground, I made a simple [online configurator](http://jkphl.github.io/svg-sprite) that lets you create a custom *svg-sprite* configuration in seconds. You may download the results as plain JSON, Node.js project, Gruntfile or Gulpfile. Please visit the configurator at http://jkphl.github.io/svg-sprite.\n\n\nAdvanced techniques\n-------------------\n\n\n### Meta data injection\n\nIn order to improve accessibility, *svg-sprite* can read meta data from a YAML file and inject `<title>` and `<description>` elements into your SVGs. Please refer to the [meta data injection guide](docs/meta-data.md) for details.\n\n\n### Aligning and duplicating shapes\n\nFor CSS sprites using a `\"horizontal\"` or `\"vertical\"` layout it is sometimes desirable to align the shapes within the sprite. With the help of an external YAML file, *svg-sprite* can not only [control the alignment](docs/shape-alignment.md#aligning-and-duplicating-shapes) for each individual shape but also [create displaced copies](docs/shape-alignment.md#creating-displaced-shape-copies) of them without significantly increasing the sprite's file size.\n\n\n### Tweaking and adding output formats\n\n*svg-sprite* uses [Mustache](http://mustache.github.io/) templates for rendering the various CSS resources. This makes it very easy to tailor the generated CSS / Sass / LESS / Stylus resources to your needs or add completely new output formats. Please refer to the [templating guide](docs/templating.md) to learn about the details.\n\n\nCommand line usage\n------------------\n\n*svg-sprite* comes with a pretty feature complete command line version. A typical example could look like this:\n\n```bash\n$ svg-sprite --css --css-render-css --css-example --dest=out assets/*.svg\n```\n\nPlease refer to the [CLI guide](docs/command-line.md) for further details.\n\n\nKnown problems / To-do\n----------------------\n\n* SVGO does not minify element IDs when there are `<style>` or `<script>` elements contained in the file\n\n\nChangelog\n---------\n\nPlease refer to the [changelog](CHANGELOG.md) for a complete release history.\n\n\nLegal\n-----\nCopyright © 2015 Joschi Kuphal <joschi@kuphal.net> / [@jkphl](https://twitter.com/jkphl). *svg-sprite* is licensed under the terms of the [MIT license](LICENSE.txt). The contained example SVG icons are part of the [Tango Icon Library](http://tango.freedesktop.org/Tango_Icon_Library) and belong to the Public Domain.\n\n\n[npm-url]: https://npmjs.org/package/svg-sprite\n[npm-image]: https://badge.fury.io/js/svg-sprite.svg\n[npm-downloads]: https://img.shields.io/npm/dm/svg-sprite.svg\n\n[travis-url]: http://travis-ci.org/jkphl/svg-sprite\n[travis-image]: https://secure.travis-ci.org/jkphl/svg-sprite.svg\n\n[coveralls-url]: https://coveralls.io/r/jkphl/svg-sprite\n[coveralls-image]: https://img.shields.io/coveralls/jkphl/svg-sprite.svg\n\n[depstat-url]: https://david-dm.org/jkphl/svg-sprite#info=dependencies\n[depstat-image]: https://david-dm.org/jkphl/svg-sprite.svg\n[devdepstat-url]: https://david-dm.org/jkphl/svg-sprite#info=devDependencies\n[devdepstat-image]: https://david-dm.org/jkphl/svg-sprite/dev-status.svg\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jkphl/svg-sprite.git"
  },
  "scripts": {
    "coveralls": "istanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage",
    "lint": "jshint bin && jshint lib && jshint test",
    "test": "istanbul test _mocha --report html -- test/*.js --reporter spec"
  },
  "version": "1.3.7"
}
